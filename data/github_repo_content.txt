File: Board.jack

class Board {
	field int xcordinate, ycordinate ;
	
	// A default constructor which receives the coordinators (x=y=128) from maiin class.
	constructor Board new(int x,int y)
	{
		let xcordinate=x;
		let ycordinate=y;
		do build();
		do fill_numbers();
		return this;
	}
	// This function draws the board with base point of (x,y) with (128,128).
	method void build()
	{
		do Screen.drawLine(xcordinate,ycordinate,xcordinate+120,ycordinate);
		do Screen.drawLine(xcordinate,ycordinate,xcordinate,ycordinate+120);
		do Screen.drawLine(xcordinate+120,ycordinate,xcordinate+120,ycordinate+120);
		do Screen.drawLine(xcordinate,ycordinate+120,xcordinate+120,ycordinate+120);
		do Screen.drawLine(xcordinate+40,ycordinate,xcordinate+40,ycordinate+120);
		do Screen.drawLine(xcordinate+80,ycordinate,xcordinate+80,ycordinate+120);
		do Screen.drawLine(xcordinate,ycordinate+40,xcordinate+120,ycordinate+40);
		do Screen.drawLine(xcordinate,ycordinate+80,xcordinate+120,ycordinate+80);
		return;
	}

	// This function prints the numbers into the board ,location is identified by adjusting curser positions.

	method void fill_numbers()
	{
		do Output.moveCursor(13,18);
		do Output.printInt(1);
		do Output.moveCursor(13,23.3);
		do Output.printInt(2);
		do Output.moveCursor(13,28);
		do Output.printInt(3);
		
		do Output.moveCursor(17,18);
		do Output.printInt(4);
		do Output.moveCursor(17,23.3);
		do Output.printInt(5);
		do Output.moveCursor(17,28);
		do Output.printInt(6);
		
		do Output.moveCursor(20.95,18);
		do Output.printInt(7);
		do Output.moveCursor(20.95,23.3);
		do Output.printInt(8);
		do Output.moveCursor(20.95,28);
		do Output.printInt(9);
		return;
	}

	// A dispose function which deallocates

	method void dispose()
	{
		do Memory.deAlloc(this);
		return ;
	}
}	

File: Board.vm
function Board.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push pointer 0
call Board.build 1
pop temp 0
push pointer 0
call Board.fill_numbers 1
pop temp 0
push pointer 0
return
function Board.build 0
push argument 0
pop pointer 0
push this 0
push this 1
push this 0
push constant 120
add
push this 1
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push this 0
push this 1
push constant 120
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 120
add
push this 1
push this 0
push constant 120
add
push this 1
push constant 120
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push constant 120
add
push this 0
push constant 120
add
push this 1
push constant 120
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 40
add
push this 1
push this 0
push constant 40
add
push this 1
push constant 120
add
call Screen.drawLine 4
pop temp 0
push this 0
push constant 80
add
push this 1
push this 0
push constant 80
add
push this 1
push constant 120
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push constant 40
add
push this 0
push constant 120
add
push this 1
push constant 40
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 1
push constant 80
add
push this 0
push constant 120
add
push this 1
push constant 80
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
function Board.fill_numbers 0
push argument 0
pop pointer 0
push constant 13
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call Output.printInt 1
pop temp 0
push constant 13
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 2
call Output.printInt 1
pop temp 0
push constant 13
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 3
call Output.printInt 1
pop temp 0
push constant 17
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 4
call Output.printInt 1
pop temp 0
push constant 17
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 5
call Output.printInt 1
pop temp 0
push constant 17
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 6
call Output.printInt 1
pop temp 0
push constant 20
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 7
call Output.printInt 1
pop temp 0
push constant 20
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 8
call Output.printInt 1
pop temp 0
push constant 20
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 9
call Output.printInt 1
pop temp 0
push constant 0
return
function Board.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return


File: LICENSE
MIT License

Copyright (c) 2023 Harish Vijay

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


File: Main.jack
                                                                                     /*A main class-Game starts here*/
class Main
{
	
	function void main()
	{
		var int counter;
		var Board board;
		var Array arr;
		var boolean flag;
		var int n;
		var int i;
		let board=Board.new(130,130);
		let arr=Array.new(10);
		let flag = true;
		let counter=0;
		do Main.stuffs();
                
		while (flag)
		{
			let n = Keyboard.readInt("Player 1,choose a number between 1-9: ");
			let i = 0 ;
			
			do Output.moveCursor(6,0);
			while ((arr[n] = 1) | (arr[n] = -1) | (n < 1) | (n > 9))
			{
				let n = Keyboard.readInt("Player 1,Please select legal number: ");
				let i = 0 ;
				
				do Output.moveCursor(6,0);
			}
			let arr[n]=1;
			let counter = counter + 1 ;
			do X.draw(n);
			if (Main.Checkwinner(arr,1)=false)
			{
				do Output.printString("Player 1 won!Player 1 won!Player 1 won!");
				let flag = false;
			}
			if ((counter = 9) & (flag))
			{
				do Output.printString("Oops! There is no winner");
				do arr.dispose();
				do board.dispose();
				return;
			}
			if (flag)
			{
				let n = Keyboard.readInt("Player 2,choose a number between 1-9: ");
				let i = 0 ;
				
				do Output.moveCursor(6,0);
				while ((arr[n] = 1) | (arr[n] = -1) | (n < 1) | (n > 9))
				{
				
					let n = Keyboard.readInt("Player 2,Please select legal number: ");
					let i = 0 ;
					
					do Output.moveCursor(6,0);
				}
				let arr[n] = -1;
				let counter = counter + 1;
				do O.draw(n);
				if (Main.Checkwinner(arr,-1) = false)
				{
					do Output.printString("Player 2 won!Player 2 won!Player 2 won!");
					let flag = false;
				}
			}	
		}
		do arr.dispose();
		do board.dispose();
		return;
	}

	// This function checks if there is a winner or not ,if winner exists it returns false. 

	function boolean Checkwinner(Array arr, int i)
	{
			if ((arr[1] = i) & (arr[2] = i) & (arr[3] = i))
			{
				do Screen.drawLine(128,128+20,128+120,128+20);
				return false;
			}
			if ((arr[4] = i) & (arr[5] = i) & (arr[6] = i))
			{
				do Screen.drawLine(128,128+63,128+120,128+63);
				return false;
			}
			if ((arr[7] = i) & (arr[8] = i) & (arr[9] = i))
			{
				do Screen.drawLine(128,128+97,128+120,128+97);
				return false;
			}
			if ((arr[1] = i) & (arr[4] = i) & (arr[7] = i))
			{
				do Screen.drawLine(128+20,128,128+20,128+120);
				return false;
			}
			if ((arr[2] = i) & (arr[5] = i) & (arr[8] = i))
			{
				do Screen.drawLine(128+60,128,128+60,128+120);
				return false;
			}
			if ((arr[3] = i) & (arr[6] = i) & (arr[9] = i))
			{
				do Screen.drawLine(128+100,128,128+100,128+120);
				return false;
			}
			if ((arr[1] = i) & (arr[5] = i) & (arr[9] = i))
			{
				do Screen.drawLine(128,128,128+120,128+120);
				return false;
			}
			if ((arr[3] = i) & (arr[5] = i) & (arr[7] = i))
			{
				do Screen.drawLine(128,128+120,128+120,128);
				return false;
			}
			return true;
			
	}

	// This function writes the stuffs wanted on the screen.

	function void stuffs()
	{
		do Output.moveCursor(1,0);
		do Output.printString("XOXO");
		do Output.moveCursor(1,60);
		do Output.printString("XOXO");
		do Output.moveCursor(1,20);
		do Output.printString("Welcome To Tic Tac Toe !");
		do Output.moveCursor(13,44);
		do Output.printString("by");
                do Output.moveCursor(15,47);
		do Output.printString("Harish vijay");
                do Output.moveCursor(16,47);
		do Output.printString("");
                do Output.moveCursor(17,47);
		do Output.printString("");
                do Output.moveCursor(18,47);
		do Output.printString("");
		do Output.moveCursor(6,0);
		return;
	}	
	
}

File: Main.vm
function Main.main 6
push constant 130
push constant 130
call Board.new 2
pop local 1
push constant 10
call Array.new 1
pop local 2
push constant 0
not
pop local 3
push constant 0
pop local 0
call Main.stuffs 0
pop temp 0
label WHILE_EXP0
push local 3
not
if-goto WHILE_END0
push constant 38
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 104
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 57
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Keyboard.readInt 1
pop local 4
push constant 0
pop local 5
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label WHILE_EXP1
push local 4
push local 2
add
pop pointer 1
push that 0
push constant 1
eq
push local 4
push local 2
add
pop pointer 1
push that 0
push constant 1
neg
eq
or
push local 4
push constant 1
lt
or
push local 4
push constant 9
gt
or
not
if-goto WHILE_END1
push constant 37
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Keyboard.readInt 1
pop local 4
push constant 0
pop local 5
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
goto WHILE_EXP1
label WHILE_END1
push local 4
push local 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 4
call X.draw 1
pop temp 0
push local 2
push constant 1
call Main.Checkwinner 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 39
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
pop local 3
label IF_FALSE0
push local 0
push constant 9
eq
push local 3
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 24
call String.new 1
push constant 79
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 112
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 104
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 2
call Array.dispose 1
pop temp 0
push local 1
call Board.dispose 1
pop temp 0
push constant 0
return
label IF_FALSE1
push local 3
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 38
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 104
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 49
call String.appendChar 2
push constant 45
call String.appendChar 2
push constant 57
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Keyboard.readInt 1
pop local 4
push constant 0
pop local 5
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label WHILE_EXP2
push local 4
push local 2
add
pop pointer 1
push that 0
push constant 1
eq
push local 4
push local 2
add
pop pointer 1
push that 0
push constant 1
neg
eq
or
push local 4
push constant 1
lt
or
push local 4
push constant 9
gt
or
not
if-goto WHILE_END2
push constant 37
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 44
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 103
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 98
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Keyboard.readInt 1
pop local 4
push constant 0
pop local 5
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
goto WHILE_EXP2
label WHILE_END2
push local 4
push local 2
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 4
call O.draw 1
pop temp 0
push local 2
push constant 1
neg
call Main.Checkwinner 2
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 39
call String.new 1
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
push constant 80
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 119
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 33
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
pop local 3
label IF_FALSE3
label IF_FALSE2
goto WHILE_EXP0
label WHILE_END0
push local 2
call Array.dispose 1
pop temp 0
push local 1
call Board.dispose 1
pop temp 0
push constant 0
return
function Main.Checkwinner 0
push constant 1
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 2
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 3
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 128
push constant 128
push constant 20
add
push constant 128
push constant 120
add
push constant 128
push constant 20
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE0
push constant 4
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 6
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 128
push constant 128
push constant 63
add
push constant 128
push constant 120
add
push constant 128
push constant 63
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE1
push constant 7
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 8
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 128
push constant 128
push constant 97
add
push constant 128
push constant 120
add
push constant 128
push constant 97
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE2
push constant 1
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 4
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 7
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 128
push constant 20
add
push constant 128
push constant 128
push constant 20
add
push constant 128
push constant 120
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE3
push constant 2
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 8
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 128
push constant 60
add
push constant 128
push constant 128
push constant 60
add
push constant 128
push constant 120
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE4
push constant 3
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 6
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 128
push constant 100
add
push constant 128
push constant 128
push constant 100
add
push constant 128
push constant 120
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE5
push constant 1
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 9
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 128
push constant 128
push constant 128
push constant 120
add
push constant 128
push constant 120
add
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE6
push constant 3
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
push constant 5
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
push constant 7
push argument 0
add
pop pointer 1
push that 0
push argument 1
eq
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 128
push constant 128
push constant 120
add
push constant 128
push constant 120
add
push constant 128
call Screen.drawLine 4
pop temp 0
push constant 0
return
label IF_FALSE7
push constant 0
not
return
function Main.stuffs 0
push constant 1
push constant 0
call Output.moveCursor 2
pop temp 0
push constant 4
call String.new 1
push constant 88
call String.appendChar 2
push constant 79
call String.appendChar 2
push constant 88
call String.appendChar 2
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 1
push constant 60
call Output.moveCursor 2
pop temp 0
push constant 4
call String.new 1
push constant 88
call String.appendChar 2
push constant 79
call String.appendChar 2
push constant 88
call String.appendChar 2
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 1
push constant 20
call Output.moveCursor 2
pop temp 0
push constant 24
call String.new 1
push constant 87
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 84
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 33
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 13
push constant 44
call Output.moveCursor 2
pop temp 0
push constant 2
call String.new 1
push constant 98
call String.appendChar 2
push constant 121
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 15
push constant 47
call Output.moveCursor 2
pop temp 0
push constant 12
call String.new 1
push constant 72
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 104
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 118
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 106
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 121
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 16
push constant 47
call Output.moveCursor 2
pop temp 0
push constant 0
call String.new 1
call Output.printString 1
pop temp 0
push constant 17
push constant 47
call Output.moveCursor 2
pop temp 0
push constant 0
call String.new 1
call Output.printString 1
pop temp 0
push constant 18
push constant 47
call Output.moveCursor 2
pop temp 0
push constant 0
call String.new 1
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
push constant 0
return


File: O.jack

class O 

	// This function receives input from the user to draw "O" on the respective position.


{
	function void draw(int num)
	{
		if(num = 1)
		{
			do Output.moveCursor(13,18);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);
	
		}
		if(num = 2)
		{       
                	do Output.moveCursor(13,23.3);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 3)
		{
                	do Output.moveCursor(13,28);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);


		}
		if(num = 4)
		{
                	do Output.moveCursor(17,18);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 5)
		{
                	do Output.moveCursor(17,23.3);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 6)
		{
                	do Output.moveCursor(17,28);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 7)
		{
                	do Output.moveCursor(20.95,18);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 8)
		{
                	do Output.moveCursor(20.95,23.3);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		if(num = 9)
		{
                	do Output.moveCursor(20.95,28);
		        do Output.printString("O");
		        do Output.moveCursor(6,0);

		}
		return;
	}
}

File: O.vm
function O.draw 0
push argument 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 13
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE0
push argument 0
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 13
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE1
push argument 0
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 13
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE2
push argument 0
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 17
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE3
push argument 0
push constant 5
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 17
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE4
push argument 0
push constant 6
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 17
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE5
push argument 0
push constant 7
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 20
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE6
push argument 0
push constant 8
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 20
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE7
push argument 0
push constant 9
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 20
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 79
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE8
push constant 0
return


File: README.md
# Tic-Tac-Toe_jack
The Tic-Tac-Toe game in Jack is a simplified version of the classic game played on a 3x3 grid. The objective of the game is to get three of your symbols (either 'X' or 'O') in a row, either horizontally, vertically, or diagonally, before your opponent does.


File: X.jack

class X {


	
	// This function receives input from the user to draw "X" on the respective position.


	function void draw(int num)
	{
		if(num = 1)
		{
			do Output.moveCursor(13,18);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);
	
		}
		if(num = 2)
		{       
                	do Output.moveCursor(13,23.3);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 3)
		{
                	do Output.moveCursor(13,28);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);


		}
		if(num = 4)
		{
                	do Output.moveCursor(17,18);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 5)
		{
                	do Output.moveCursor(17,23.3);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 6)
		{
                	do Output.moveCursor(17,28);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 7)
		{
                	do Output.moveCursor(20.95,18);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 8)
		{
                	do Output.moveCursor(20.95,23.3);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		if(num = 9)
		{
                	do Output.moveCursor(20.95,28);
		        do Output.printString("X");
		        do Output.moveCursor(6,0);

		}
		return;
	}
}


File: X.vm
function X.draw 0
push argument 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 13
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE0
push argument 0
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 13
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE1
push argument 0
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 13
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE2
push argument 0
push constant 4
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 17
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE3
push argument 0
push constant 5
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 17
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE4
push argument 0
push constant 6
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 17
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE5
push argument 0
push constant 7
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 20
push constant 18
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE6
push argument 0
push constant 8
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 20
push constant 23
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE7
push argument 0
push constant 9
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 20
push constant 28
call Output.moveCursor 2
pop temp 0
push constant 1
call String.new 1
push constant 88
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 6
push constant 0
call Output.moveCursor 2
pop temp 0
label IF_FALSE8
push constant 0
return


