File: .vscode/settings.json
{
  "liveServer.settings.port": 5501
}

File: LICENSE
MIT License

Copyright (c) 2023 MITHIN DEV 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


File: README.md
<h1 align="center">CODE SNIPüìÇ</h1>

<h2 align="center">üìù A Note Taking Web App üåê</h2>

<h3 align="center">This is a web application that allows users to take notes and save them for future reference.</h3>

## üöÄ Features

- üìòCreate Notes
- üìòUpdate Notes
- üìòDelete Notes
- üìòSave Notes onto your local server

## üíª Technologies Used

- ü©ªHTML
- üí´CSS
- ü§ñJavaScript

## üõ†Ô∏è Installation

- Clone the repository using the command git clone https://github.com/mithindev/My-Note-Taking-Web-App.git
- Install the required dependencies using the command npm install
- Start the server using the command npm start
- Open http://localhost:3000 in your browser

## üì∑ Screenshots

<img src="asset/referencr.png">

## ü§ù Contributing

Contributions are always welcome! Please create a pull request with your changes.

## üìù License

This project is licensed under the MIT License - see the LICENSE file for details.

## üìß Contact

If you have any questions or suggestions, please feel free to contact me at my email: mithindev@gmail.com
<br>
Happy note-taking! üëç


File: public/index.html
<!DOCTYPE html>
<html lang="en-us">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="/asset/favicon-1.png">
  <title>Note Snipüìù</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1 class="heading"><span id="name">Mithin</span>'s Notesüìù</h1>
  <p class="info-text">Double click on a note to remove it</p>

  <div class="app" id="app">
    <!-- <textarea cols="30" rows="10" class="note" placeholder="Empty Note"></textarea> -->
  
    <button class="btn" id="btn">+</button>
  </div>

  <div class="options">
    <button class="btn1" id="clear-all-btn">Clear All</button>
    <!-- <button class="btn" id="change-name-btn">Change Name</button> -->
  </div>
  
  <script src="index.js"></script>
</body>
</html>


File: public/index.js
const btnEl = document.getElementById("btn");
const appEl = document.getElementById("app");
const clearAllBtnEl = document.getElementById("clear-all-btn");
const changeNameBtnEl = document.getElementById("change-name-btn");

// Load notes from local storage
let notes = getNotes();

// Render existing notes
notes.forEach((note) => {
  const noteEl = createNoteEl(note.id, note.content);
  appEl.insertBefore(noteEl, btnEl);
});

// Create a new note element
function createNoteEl(id, content) {
  const element = document.createElement("textarea");
  element.classList.add("note");
  element.placeholder = "Empty Note";
  element.value = content;

  element.addEventListener("dblclick", () => {
    const confirmation = confirm(localStorage.getItem("name") + ", Do you want to delete this note?üòä");
    if (confirmation) {
      deleteNote(id, element);
    }
  });

  element.addEventListener("input", () => {
    updateNote(id, element.value);
  });

  return element;
}

// Delete a note
function deleteNote(id, element) {
  notes = notes.filter((note) => note.id !== id);
  saveNotes();
  appEl.removeChild(element);
}

// Update a note
function updateNote(id, content) {
  const note = notes.find((note) => note.id === id);
  if (note) {
    note.content = content;
    saveNotes();
  }
}

// Add a new note
function addNote() {
  const noteObj = {
    id: Math.floor(Math.random() * 100000),
    content: "",
  };

  const noteEl = createNoteEl(noteObj.id, noteObj.content);
  appEl.insertBefore(noteEl, btnEl);

  notes.push(noteObj);
  saveNotes();
}

// Save notes to local storage
function saveNotes() {
  localStorage.setItem("note-app", JSON.stringify(notes));
}

// Retrieve notes from local storage
function getNotes() {
  return JSON.parse(localStorage.getItem("note-app")) || [];
}

// Clear all notes
function clearAllNotes() {
  notes = [];
  saveNotes();
  appEl.innerHTML = '';
}

// Change name
function changeName() {
  const newName = prompt("Please enter a new username");
  if (newName) {
    localStorage.setItem("name", newName);
    document.getElementById("name").textContent = newName;
    document.title = newName + "'s Notesüìù";
  }
}

// Event listener for adding a new note
btnEl.addEventListener("click", addNote);

// Event listener for clearing all notes
clearAllBtnEl.addEventListener("click", clearAllNotes);

// Event listener for changing name
changeNameBtnEl.addEventListener("click", changeName);

// Personalization
if (!localStorage.getItem("hasLoadedBefore")) {
  const name = prompt("Please enter a username");
  localStorage.setItem("name", name);
  localStorage.setItem("hasLoadedBefore", true);
  location.reload();
} else {
  const name = localStorage.getItem("name");
  document.getElementById("name").textContent = name;
  document.title = name + "'s Notesüìù";
}


File: public/style.css
body {
  margin: 0;
  background: linear-gradient(to left, rgba(51, 159, 186, 0.519), rgba(63, 70, 164, 0.514));
  font-family: 'Courier New', Courier, monospace;
}

.heading {
  color: darkblue;
  text-align: center;
  padding-top: 10px;
  font-size: 35px;
}

.info-text {
  text-align: center;
  color: black;
  font-size: 20px;
}

.app {
  display: grid;
  grid-template-columns: repeat(auto-fill, 300px);
  gap: 40px;
  justify-content: center;
  padding: 50px;
}

.note {
  padding: 17px;
  border-radius: 15px;
  resize: none;
  box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
  font-size: 16px;
  height: 200px;
  color: darkblue;
  border: none;
  outline: none;
  background: rgba(255, 255, 255, 0.1);
  box-sizing: border-box;
}

.note::placeholder {
  color: gray;
  opacity: 30%;
}

.note:hover,
note:focus {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  transition: all 300ms ease;
}

.btn {
  padding: 17px;
  border-radius: 15px;
  resize: none;
  box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
  font-size: 16px;
  height: 200px;
  color: darkblue;
  border: none;
  outline: none;
  background: rgba(255, 255, 255, 0.1);
  box-sizing: border-box;
}

.btn1 {
  height: 50px;
  width: 150px;
  margin: 10px;
  border: none;
  border-radius: 10px;
  font-size: 16px;
  font-weight: 700;
  color: rgba(0, 0, 0, 0.3);
  cursor: pointer;
  transition: all 300ms ease;
}

.btn:hover {
  background: rgba(255, 255, 255, 0.55);
  color: rgba(0, 0, 0, 0.6);
}

.options {
  display: flex;
  justify-content: center;
  margin-top: 30px;
}


